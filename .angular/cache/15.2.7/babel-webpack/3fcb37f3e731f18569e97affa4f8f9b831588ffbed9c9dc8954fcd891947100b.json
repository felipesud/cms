{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport * as i0 from \"@angular/core\";\nexport class DocumentService {\n  constructor() {\n    this.documentListChangedEvent = new Subject();\n    this.documents = [];\n    this.documents = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxId();\n  }\n  getDocuments() {\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    return this.documents.find(document => document.id === id);\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const document of this.documents) {\n      const currentId = Number(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addDocument(newDocument) {\n    if (!newDocument) {\n      return;\n    }\n    this.maxDocumentId++;\n    newDocument.id = this.maxDocumentId.toString();\n    this.documents.push(newDocument);\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)();\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;AAG9B,SAASC,aAAa,QAAQ,iBAAiB;;AAK/C,OAAM,MAAOC,eAAe;EAK1BC;IAJA,6BAAwB,GAAG,IAAIH,OAAO,EAAc;IACpD,cAAS,GAAe,EAAE;IAIxB,IAAI,CAACI,SAAS,GAAGH,aAAa;IAC9B,IAAI,CAACI,aAAa,GAAG,IAAI,CAACC,QAAQ,EAAE;EACtC;EAEAC,YAAY;IACV,OAAO,IAAI,CAACH,SAAS,CAACI,KAAK,EAAE;EAC/B;EAEAC,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACN,SAAS,CAACO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,EAAE,KAAKA,EAAE,CAAC;EAC9D;EAEAJ,QAAQ;IACN,IAAIO,KAAK,GAAG,CAAC;IAEb,KAAK,MAAMD,QAAQ,IAAI,IAAI,CAACR,SAAS,EAAE;MACrC,MAAMU,SAAS,GAAGC,MAAM,CAACH,QAAQ,CAACF,EAAE,CAAC;MACrC,IAAII,SAAS,GAAGD,KAAK,EAAE;QACrBA,KAAK,GAAGC,SAAS;;;IAGrB,OAAOD,KAAK;EACd;EAEAG,WAAW,CAACC,WAAqB;IAC/B,IAAI,CAACA,WAAW,EAAE;MAChB;;IAGF,IAAI,CAACZ,aAAa,EAAE;IACpBY,WAAW,CAACP,EAAE,GAAG,IAAI,CAACL,aAAa,CAACa,QAAQ,EAAE;IAC9C,IAAI,CAACd,SAAS,CAACe,IAAI,CAACF,WAAW,CAAC;IAChC,MAAMG,kBAAkB,GAAG,IAAI,CAAChB,SAAS,CAACI,KAAK,EAAE;IACjD,IAAI,CAACa,wBAAwB,CAACC,IAAI,CAACF,kBAAkB,CAAC;EACxD;EAEAG,cAAc,CAACC,gBAA0B,EAAEP,WAAqB;IAC9D,IAAI,CAACO,gBAAgB,IAAI,CAACP,WAAW,EAAE;MACrC;;IAGF,MAAMQ,GAAG,GAAG,IAAI,CAACrB,SAAS,CAACsB,OAAO,CAACF,gBAAgB,CAAC;IACpD,IAAIC,GAAG,GAAG,CAAC,EAAE;MACX;;IAGFR,WAAW,CAACP,EAAE,GAAGc,gBAAgB,CAACd,EAAE;IACpC,IAAI,CAACN,SAAS,CAACqB,GAAG,CAAC,GAAGR,WAAW;IAEjC,MAAMG,kBAAkB,GAAG,IAAI,CAAChB,SAAS,CAACI,KAAK,EAAE;IACjD,IAAI,CAACa,wBAAwB,CAACC,IAAI,CAACF,kBAAkB,CAAC;EACxD;EAEAO,cAAc,CAACf,QAAkB;IAC/B,IAAI,CAACA,QAAQ,EAAE;MACb;;IAGF,MAAMa,GAAG,GAAG,IAAI,CAACrB,SAAS,CAACsB,OAAO,CAACd,QAAQ,CAAC;IAC5C,IAAIa,GAAG,GAAG,CAAC,EAAE;MACX;;IAGF,IAAI,CAACrB,SAAS,CAACwB,MAAM,CAACH,GAAG,EAAE,CAAC,CAAC;IAC7B,MAAML,kBAAkB,GAAG,IAAI,CAAChB,SAAS,CAACI,KAAK,EAAE;IACjD,IAAI,CAACa,wBAAwB,CAACC,IAAI,CAACF,kBAAkB,CAAC;EACxD;;AAxEWlB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA2B,SAAf3B,eAAe;EAAA4B,YAFd;AAAM","names":["Subject","MOCKDOCUMENTS","DocumentService","constructor","documents","maxDocumentId","getMaxId","getDocuments","slice","getDocument","id","find","document","maxId","currentId","Number","addDocument","newDocument","toString","push","documentsListClone","documentListChangedEvent","next","updateDocument","originalDocument","pos","indexOf","deleteDocument","splice","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/documents/document.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Document } from './document.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n  documentListChangedEvent = new Subject<Document[]>();\n  documents: Document[] = [];\n  maxDocumentId: number;\n\n  constructor() {\n    this.documents = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxId();\n  }\n\n  getDocuments(): Document[] {\n    return this.documents.slice();\n  }\n\n  getDocument(id: string) {\n    return this.documents.find((document) => document.id === id);\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n\n    for (const document of this.documents) {\n      const currentId = Number(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  addDocument(newDocument: Document) {\n    if (!newDocument) {\n      return;\n    }\n\n    this.maxDocumentId++;\n    newDocument.id = this.maxDocumentId.toString();\n    this.documents.push(newDocument);\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n\n    this.documents.splice(pos, 1);\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}