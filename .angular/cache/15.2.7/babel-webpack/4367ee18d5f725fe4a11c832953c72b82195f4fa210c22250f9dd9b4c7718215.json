{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class DocumentService {\n  constructor() {\n    this.documentListChangedEvent = new Subject();\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.documents = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxId();\n  }\n  getDocuments() {\n    //  return the list of contacts\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    return this.documents.find(document => {\n      return document.id === id;\n    });\n  }\n  deleteDocument(document) {\n    // validation - test if valid document\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      // . If the index is negative, the document was not found and the method is aborted.\n      return;\n    }\n    this.documents.splice(pos, 1);\n    // this.documentChangedEvent.emit(this.documents.slice());\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n  addDocument(newDocument) {\n    if (!newDocument) {\n      return;\n    }\n    this.maxDocumentId++;\n    newDocument.id = this.maxDocumentId.toString();\n    this.documents.push(newDocument);\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n  updateDocument(originalDocument, newDocument) {\n    console.log(originalDocument);\n    console.log(newDocument);\n    // if (!originalDocument || !newDocument)\n    if (originalDocument == null || originalDocument == undefined || newDocument == null || newDocument == undefined) {\n      console.log('stuck here?');\n      return;\n    }\n    console.log('qwer');\n    let pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n  getMaxId() {\n    let maxId = 0;\n    // let currentId;\n    for (const document of this.documents) {\n      let currentId = Number(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)();\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","MOCKDOCUMENTS","Subject","DocumentService","constructor","documents","maxDocumentId","getMaxId","getDocuments","slice","getDocument","id","find","document","deleteDocument","pos","indexOf","splice","documentListChangedEvent","next","addDocument","newDocument","toString","push","documentsListClone","updateDocument","originalDocument","console","log","undefined","maxId","currentId","Number","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/documents/document.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentService {\n\n  documents: Document[];\n\n  maxDocumentId: number;\n\n  documentListChangedEvent = new Subject<Document[]>();\n\n  documentSelectedEvent = new EventEmitter<Document>();\n\n  documentChangedEvent = new EventEmitter<Document[]>();\n\n  constructor() {\n    this.documents = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxId();\n  }\n\n  getDocuments(): Document[]{\n    //  return the list of contacts\n    return this.documents.slice();\n  }\n  getDocument(id: string): Document {\n    return this.documents.find(document => {\n        \n        return document.id === id;\n    });\n}\ndeleteDocument(document: Document) {\n  // validation - test if valid document\n  if (!document) {\n     return;\n  }\n  const pos = this.documents.indexOf(document);\n  if (pos < 0) { // . If the index is negative, the document was not found and the method is aborted.\n     return;\n  }\n  this.documents.splice(pos, 1);\n  // this.documentChangedEvent.emit(this.documents.slice());\n  this.documentListChangedEvent.next(this.documents.slice())\n}\n\naddDocument(newDocument: Document) {\n  if (!newDocument){\n    return;\n  }\n\n  this.maxDocumentId++\n  newDocument.id = this.maxDocumentId.toString();\n  this.documents.push(newDocument)\n  const documentsListClone = this.documents.slice()\n  this.documentListChangedEvent.next(documentsListClone)\n}\n\nupdateDocument(originalDocument: Document, newDocument: Document) {\n  console.log(originalDocument)\n  console.log(newDocument)\n  // if (!originalDocument || !newDocument)\n\n  if (originalDocument == null || originalDocument == undefined || newDocument == null || newDocument == undefined)\n  {\n    console.log('stuck here?')\n    return\n  }    \n\n  console.log('qwer')\n\n  let pos = this.documents.indexOf(originalDocument)\n  if(pos < 0){\n    return\n  }\n  newDocument.id = originalDocument.id\n  this.documents[pos] = newDocument\n  const documentsListClone = this.documents.slice()\n  this.documentListChangedEvent.next(documentsListClone)\n}\n\ngetMaxId(): number {\n  let maxId = 0;\n  // let currentId;\n\n  for (const document of this.documents){\n    let currentId = Number(document.id);\n    if(currentId > maxId){\n      maxId = currentId;\n    }\n  }\n\n  return maxId\n}\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}