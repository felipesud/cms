{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    // contactSelectedEvent = new Subject<Contact>();\n    this.contactListChangedEvent = new Subject();\n    this.contacts = [];\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxId();\n  }\n  getContacts() {\n    // console.log('Getting all contacts.');\n    return this.contacts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0).slice();\n  }\n  getContact(id) {\n    // console.log('Getting a contact.');\n    return this.contacts.find(c => c.id === id);\n  }\n  getMaxId() {\n    // console.log('Getting the contacts maxId.');\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = Number(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  // Add contact will be called by the ContactEditComponent Save button\n  addContact(newContact) {\n    // console.log('Adding a contact.');\n    if (!newContact) {\n      return;\n    }\n    this.maxContactId++;\n    newContact.id = this.maxContactId.toString();\n    this.contacts.push(newContact);\n    const contactsCloneList = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsCloneList);\n  }\n  // Update contact will be called by the ContactEditComponent Save button\n  updateContact(originalContact, newContact) {\n    // console.log('Updating a contact.');\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n  }\n  // Delete contact will be called by the ContactDetailComponent Delete button\n  deleteContact(contact) {\n    // console.log('Deleting a contact.');\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;AAG9B,SAASC,YAAY,QAAQ,gBAAgB;;AAK7C,OAAM,MAAOC,cAAc;EAMzBC;IALA;IACA,4BAAuB,GAAG,IAAIH,OAAO,EAAa;IAC1C,aAAQ,GAAc,EAAE;IAI9B,IAAI,CAACI,QAAQ,GAAGH,YAAY;IAC5B,IAAI,CAACI,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;EACrC;EAEAC,WAAW;IACT;IACA,OAAO,IAAI,CAACH,QAAQ,CACjBI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,GAAG,CAAC,GAAGD,CAAC,CAACC,IAAI,GAAGF,CAAC,CAACE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAE,CAAC,CAChEC,KAAK,EAAE;EACZ;EAEAC,UAAU,CAACC,EAAU;IACnB;IACA,OAAO,IAAI,CAACV,QAAQ,CAACW,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;EAC/C;EAEAR,QAAQ;IACN;IACA,IAAIW,KAAK,GAAG,CAAC;IAEb,KAAK,MAAMC,OAAO,IAAI,IAAI,CAACd,QAAQ,EAAE;MACnC,MAAMe,SAAS,GAAGC,MAAM,CAACF,OAAO,CAACJ,EAAE,CAAC;MACpC,IAAIK,SAAS,GAAGF,KAAK,EAAE;QACrBA,KAAK,GAAGE,SAAS;;;IAGrB,OAAOF,KAAK;EACd;EAEA;EACAI,UAAU,CAACC,UAAmB;IAC5B;IACA,IAAI,CAACA,UAAU,EAAE;MACf;;IAGF,IAAI,CAACjB,YAAY,EAAE;IACnBiB,UAAU,CAACR,EAAE,GAAG,IAAI,CAACT,YAAY,CAACkB,QAAQ,EAAE;IAC5C,IAAI,CAACnB,QAAQ,CAACoB,IAAI,CAACF,UAAU,CAAC;IAC9B,MAAMG,iBAAiB,GAAG,IAAI,CAACrB,QAAQ,CAACQ,KAAK,EAAE;IAC/C,IAAI,CAACc,uBAAuB,CAACC,IAAI,CAACF,iBAAiB,CAAC;EACtD;EAEA;EACAG,aAAa,CAACC,eAAwB,EAAEP,UAAmB;IACzD;IACA,IAAI,CAACO,eAAe,IAAI,CAACP,UAAU,EAAE;MACnC;;IAGF,MAAMQ,GAAG,GAAG,IAAI,CAAC1B,QAAQ,CAAC2B,OAAO,CAACF,eAAe,CAAC;IAClD,IAAIC,GAAG,GAAG,CAAC,EAAE;MACX;;IAGFR,UAAU,CAACR,EAAE,GAAGe,eAAe,CAACf,EAAE;IAClC,IAAI,CAACV,QAAQ,CAAC0B,GAAG,CAAC,GAAGR,UAAU;IAE/B,MAAMU,iBAAiB,GAAG,IAAI,CAAC5B,QAAQ,CAACQ,KAAK,EAAE;IAC/C,IAAI,CAACc,uBAAuB,CAACC,IAAI,CAACK,iBAAiB,CAAC;EACtD;EAEA;EACAC,aAAa,CAACf,OAAgB;IAC5B;IACA,IAAI,CAACA,OAAO,EAAE;MACZ;;IAGF,MAAMY,GAAG,GAAG,IAAI,CAAC1B,QAAQ,CAAC2B,OAAO,CAACb,OAAO,CAAC;IAC1C,IAAIY,GAAG,GAAG,CAAC,EAAE;MACX;;IAGF,IAAI,CAAC1B,QAAQ,CAAC8B,MAAM,CAACJ,GAAG,EAAE,CAAC,CAAC;IAC5B,MAAME,iBAAiB,GAAG,IAAI,CAAC5B,QAAQ,CAACQ,KAAK,EAAE;IAC/C,IAAI,CAACc,uBAAuB,CAACC,IAAI,CAACK,iBAAiB,CAAC;EACtD;;AApFW9B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAiC,SAAdjC,cAAc;EAAAkC,YAFb;AAAM","names":["Subject","MOCKCONTACTS","ContactService","constructor","contacts","maxContactId","getMaxId","getContacts","sort","a","b","name","slice","getContact","id","find","c","maxId","contact","currentId","Number","addContact","newContact","toString","push","contactsCloneList","contactListChangedEvent","next","updateContact","originalContact","pos","indexOf","contactsListClone","deleteContact","splice","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  // contactSelectedEvent = new Subject<Contact>();\n  contactListChangedEvent = new Subject<Contact[]>();\n  private contacts: Contact[] = [];\n  maxContactId: number;\n\n  constructor() {\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxId();\n  }\n\n  getContacts(): Contact[] {\n    // console.log('Getting all contacts.');\n    return this.contacts\n      .sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0))\n      .slice();\n  }\n\n  getContact(id: string): Contact | null {\n    // console.log('Getting a contact.');\n    return this.contacts.find((c) => c.id === id);\n  }\n\n  getMaxId(): number {\n    // console.log('Getting the contacts maxId.');\n    let maxId = 0;\n\n    for (const contact of this.contacts) {\n      const currentId = Number(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  // Add contact will be called by the ContactEditComponent Save button\n  addContact(newContact: Contact) {\n    // console.log('Adding a contact.');\n    if (!newContact) {\n      return;\n    }\n\n    this.maxContactId++;\n    newContact.id = this.maxContactId.toString();\n    this.contacts.push(newContact);\n    const contactsCloneList = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsCloneList);\n  }\n\n  // Update contact will be called by the ContactEditComponent Save button\n  updateContact(originalContact: Contact, newContact: Contact) {\n    // console.log('Updating a contact.');\n    if (!originalContact || !newContact) {\n      return;\n    }\n\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n  }\n\n  // Delete contact will be called by the ContactDetailComponent Delete button\n  deleteContact(contact: Contact) {\n    // console.log('Deleting a contact.');\n    if (!contact) {\n      return;\n    }\n\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n\n    this.contacts.splice(pos, 1);\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}