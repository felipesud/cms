{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\nimport * as i0 from \"@angular/core\";\nexport class MessageService {\n  constructor() {\n    this.messages = [];\n    this.messageChangedEvent = new EventEmitter();\n    this.messages = MOCKMESSAGES;\n  }\n  addMessage(message) {\n    this.messages.push(message);\n    this.messageChangedEvent.emit(this.messages.slice());\n  }\n  getMessages() {\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    return this.messages.find(message => message.id === id) || null;\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)();\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AAExD,SAASC,YAAY,QAAQ,gBAAgB;;AAK7C,OAAM,MAAOC,cAAc;EAIzBC;IAHA,aAAQ,GAAc,EAAE;IACxB,wBAAmB,GAAG,IAAIH,YAAY,EAAa;IAGjD,IAAI,CAACI,QAAQ,GAAGH,YAAY;EAC9B;EAEAI,UAAU,CAACC,OAAgB;IACzB,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACD,OAAO,CAAC;IAC3B,IAAI,CAACE,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAACL,QAAQ,CAACM,KAAK,EAAE,CAAC;EACtD;EAEAC,WAAW;IACT,OAAO,IAAI,CAACP,QAAQ,CAACM,KAAK,EAAE;EAC9B;EAEAE,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACT,QAAQ,CAACU,IAAI,CAACR,OAAO,IAAIA,OAAO,CAACO,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;EACjE;;AAnBWX,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAa,SAAdb,cAAc;EAAAc,YAFb;AAAM","names":["EventEmitter","MOCKMESSAGES","MessageService","constructor","messages","addMessage","message","push","messageChangedEvent","emit","slice","getMessages","getMessage","id","find","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/messages/message.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { Message } from './message.model';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  messages: Message[] = [];\n  messageChangedEvent = new EventEmitter<Message[]>();\n\n  constructor() {\n    this.messages = MOCKMESSAGES;\n  }\n\n  addMessage(message: Message) {\n    this.messages.push(message);\n    this.messageChangedEvent.emit(this.messages.slice());\n  }\n\n  getMessages(): Message[] {\n    return this.messages.slice();\n  }\n\n  getMessage(id: string): Message | null {\n    return this.messages.find(message => message.id === id) || null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}