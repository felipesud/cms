{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\nimport * as i0 from \"@angular/core\";\nexport class MessageService {\n  constructor() {\n    this.messageChangedEvent = new EventEmitter();\n    this.messages = [];\n    this.messages = MOCKMESSAGES;\n  }\n  getMessages() {\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    return this.messages.find(m => m.id === id);\n  }\n  addMessage(message) {\n    this.messages.push(message);\n    this.messageChangedEvent.emit(this.messages.slice());\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)();\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AAGxD,SAASC,YAAY,QAAQ,gBAAgB;;AAK7C,OAAM,MAAOC,cAAc;EAIzBC;IAHA,wBAAmB,GAAG,IAAIH,YAAY,EAAa;IACnD,aAAQ,GAAc,EAAE;IAGtB,IAAI,CAACI,QAAQ,GAAGH,YAAY;EAC9B;EAEAI,WAAW;IACT,OAAO,IAAI,CAACD,QAAQ,CAACE,KAAK,EAAE;EAC9B;EAEAC,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;EAC/C;EAEAG,UAAU,CAACC,OAAgB;IACzB,IAAI,CAACR,QAAQ,CAACS,IAAI,CAACD,OAAO,CAAC;IAC3B,IAAI,CAACE,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAACX,QAAQ,CAACE,KAAK,EAAE,CAAC;EACtD;;AAnBWJ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAc,SAAdd,cAAc;EAAAe,YAFb;AAAM","names":["EventEmitter","MOCKMESSAGES","MessageService","constructor","messages","getMessages","slice","getMessage","id","find","m","addMessage","message","push","messageChangedEvent","emit","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/messages/message.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\n\nimport { Message } from './message.model';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messageChangedEvent = new EventEmitter<Message[]>();\n  messages: Message[] = [];\n\n  constructor() {\n    this.messages = MOCKMESSAGES;\n  }\n\n  getMessages(): Message[] {\n    return this.messages.slice();\n  }\n\n  getMessage(id: string): Message {\n    return this.messages.find((m) => m.id === id);\n  }\n\n  addMessage(message: Message) {\n    this.messages.push(message);\n    this.messageChangedEvent.emit(this.messages.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}