{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    this.contacts = [];\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactListChangedEvent = new Subject();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxId();\n  }\n  addContact(newContact) {\n    if (!newContact) {\n      return;\n    }\n    this.maxContactId++;\n    newContact.id = `${this.maxContactId}`;\n    this.contacts.push(newContact);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    return this.contacts.find(contact => contact.id === id) || null;\n  }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = parseInt(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AACxD,SAASC,OAAO,QAAQ,MAAM;AAE9B,SAASC,YAAY,QAAQ,gBAAgB;;AAK7C,OAAM,MAAOC,cAAc;EAOzBC;IANA,aAAQ,GAAc,EAAE;IAExB,yBAAoB,GAAG,IAAIJ,YAAY,EAAW;IAClD,4BAAuB,GAAG,IAAIC,OAAO,EAAa;IAClD,wBAAmB,GAA4B,IAAID,YAAY,EAAa;IAG1E,IAAI,CAACK,QAAQ,GAAGH,YAAY;IAC5B,IAAI,CAACI,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;EACrC;EAEAC,UAAU,CAACC,UAAmB;IAC5B,IAAI,CAACA,UAAU,EAAE;MACf;;IAGF,IAAI,CAACH,YAAY,EAAE;IACnBG,UAAU,CAACC,EAAE,GAAG,GAAG,IAAI,CAACJ,YAAY,EAAE;IACtC,IAAI,CAACD,QAAQ,CAACM,IAAI,CAACF,UAAU,CAAC;IAC9B,IAAI,CAACG,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACS,KAAK,EAAE,CAAC;EAC1D;EAEAC,aAAa,CAACC,eAAwB,EAAEP,UAAmB;IACzD,IAAI,CAACO,eAAe,IAAI,CAACP,UAAU,EAAE;MACnC;;IAGF,MAAMQ,GAAG,GAAG,IAAI,CAACZ,QAAQ,CAACa,OAAO,CAACF,eAAe,CAAC;IAClD,IAAIC,GAAG,GAAG,CAAC,EAAE;MACX;;IAGFR,UAAU,CAACC,EAAE,GAAGM,eAAe,CAACN,EAAE;IAClC,IAAI,CAACL,QAAQ,CAACY,GAAG,CAAC,GAAGR,UAAU;IAC/B,IAAI,CAACG,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACS,KAAK,EAAE,CAAC;EAC1D;EAEAK,WAAW;IACT,OAAO,IAAI,CAACd,QAAQ,CAACS,KAAK,EAAE;EAC9B;EAEAM,UAAU,CAACV,EAAU;IACnB,OAAO,IAAI,CAACL,QAAQ,CAACgB,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACZ,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;EACjE;EAEAa,aAAa,CAACD,OAAgB;IAC5B,IAAI,CAACA,OAAO,EAAE;MACZ;;IAEF,MAAML,GAAG,GAAG,IAAI,CAACZ,QAAQ,CAACa,OAAO,CAACI,OAAO,CAAC;IAC1C,IAAIL,GAAG,GAAG,CAAC,EAAE;MACX;;IAEF,IAAI,CAACZ,QAAQ,CAACmB,MAAM,CAACP,GAAG,EAAE,CAAC,CAAC;IAC5B,IAAI,CAACL,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAACS,KAAK,EAAE,CAAC;EAC1D;EAEAP,QAAQ;IACN,IAAIkB,KAAK,GAAG,CAAC;IACb,KAAK,MAAMH,OAAO,IAAI,IAAI,CAACjB,QAAQ,EAAE;MACnC,MAAMqB,SAAS,GAAGC,QAAQ,CAACL,OAAO,CAACZ,EAAE,CAAC;MACtC,IAAIgB,SAAS,GAAGD,KAAK,EAAE;QACrBA,KAAK,GAAGC,SAAS;;;IAGrB,OAAOD,KAAK;EACd;;AAnEWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAyB,SAAdzB,cAAc;EAAA0B,YAFb;AAAM","names":["EventEmitter","Subject","MOCKCONTACTS","ContactService","constructor","contacts","maxContactId","getMaxId","addContact","newContact","id","push","contactListChangedEvent","next","slice","updateContact","originalContact","pos","indexOf","getContacts","getContact","find","contact","deleteContact","splice","maxId","currentId","parseInt","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  contacts: Contact[] = [];\n  maxContactId: number;\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactListChangedEvent = new Subject<Contact[]>();\n  contactChangedEvent: EventEmitter<Contact[]> = new EventEmitter<Contact[]>();\n\n  constructor() {\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxId();\n  }\n\n  addContact(newContact: Contact) {\n    if (!newContact) {\n      return;\n    }\n  \n    this.maxContactId++;\n    newContact.id = `${this.maxContactId}`;\n    this.contacts.push(newContact);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n  \n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n  \n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n\n  getContacts(): Contact[] {\n    return this.contacts.slice();\n  }\n\n  getContact(id: string): Contact | null {\n    return this.contacts.find(contact => contact.id === id) || null;\n  }\n\n  deleteContact(contact: Contact): void {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = parseInt(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}