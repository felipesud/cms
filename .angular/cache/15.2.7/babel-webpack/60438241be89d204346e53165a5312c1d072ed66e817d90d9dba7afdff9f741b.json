{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ContactsFilterPipe {\n  // transform(contacts: Contact[], term: string): any {\n  //   let filteredArray: Contact[] = [];\n  //   for (let i = 0; i < contacts.length; i++) {\n  //     let contact = contacts[i];\n  //     if (contact.name.toLowerCase().includes(term)) {\n  //       filteredArray.push(contact);\n  //     }\n  //   }\n  //   if (filteredArray.length < 1) {\n  //     return contacts;\n  //   }\n  //   return filteredArray;\n  // }\n  // transform(contacts: Contact[], term: string): any {\n  transform(contacts, term) {\n    let filteredContacts = [];\n    if (term && term.length > 0) {\n      filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(term.toLowerCase()));\n    }\n    if (filteredContacts.length < 1) {\n      return contacts;\n    }\n    return filteredContacts;\n  }\n}\nContactsFilterPipe.ɵfac = function ContactsFilterPipe_Factory(t) {\n  return new (t || ContactsFilterPipe)();\n};\nContactsFilterPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"contactsFilter\",\n  type: ContactsFilterPipe,\n  pure: true\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,kBAAkB;EAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACAC,SAAS,CAACC,QAAmB,EAAEC,IAAI;IACjC,IAAIC,gBAAgB,GAAc,EAAE;IAEpC,IAAID,IAAI,IAAIA,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;MAC3BD,gBAAgB,GAAGF,QAAQ,CAACI,MAAM,CAAEC,OAAgB,IAClDA,OAAO,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACP,IAAI,CAACM,WAAW,EAAE,CAAC,CACxD;;IAEH,IAAIL,gBAAgB,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/B,OAAOH,QAAQ;;IAEjB,OAAOE,gBAAgB;EACzB;;AA5BWJ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;;QAAlBA,kBAAkB;EAAAW;AAAA","names":["ContactsFilterPipe","transform","contacts","term","filteredContacts","length","filter","contact","name","toLowerCase","includes","pure"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/contacts/contacts-filter.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Contact } from './contact.model';\n\n@Pipe({\n  name: 'contactsFilter',\n})\nexport class ContactsFilterPipe implements PipeTransform {\n  // transform(contacts: Contact[], term: string): any {\n  //   let filteredArray: Contact[] = [];\n  //   for (let i = 0; i < contacts.length; i++) {\n  //     let contact = contacts[i];\n  //     if (contact.name.toLowerCase().includes(term)) {\n  //       filteredArray.push(contact);\n  //     }\n  //   }\n  //   if (filteredArray.length < 1) {\n  //     return contacts;\n  //   }\n  //   return filteredArray;\n  // }\n\n  // transform(contacts: Contact[], term: string): any {\n  transform(contacts: Contact[], term): any {\n    let filteredContacts: Contact[] = [];\n\n    if (term && term.length > 0) {\n      filteredContacts = contacts.filter((contact: Contact) =>\n        contact.name.toLowerCase().includes(term.toLowerCase())\n      );\n    }\n    if (filteredContacts.length < 1) {\n      return contacts;\n    }\n    return filteredContacts;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}