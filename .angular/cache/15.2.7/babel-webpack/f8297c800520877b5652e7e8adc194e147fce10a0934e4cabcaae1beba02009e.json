{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = [];\n    this.contacts = MOCKCONTACTS;\n  }\n  getContacts() {\n    return this.contacts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0).slice();\n  }\n  getContact(id) {\n    return this.contacts.find(c => c.id === id);\n  }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    this.contactChangedEvent.emit(this.contacts.slice());\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AAGxD,SAASC,YAAY,QAAQ,gBAAgB;;AAK7C,OAAM,MAAOC,cAAc;EAKzBC;IAJA,yBAAoB,GAAG,IAAIH,YAAY,EAAW;IAClD,wBAAmB,GAAG,IAAIA,YAAY,EAAa;IAC3C,aAAQ,GAAc,EAAE;IAG9B,IAAI,CAACI,QAAQ,GAAGH,YAAY;EAC9B;EAEAI,WAAW;IACT,OAAO,IAAI,CAACD,QAAQ,CACjBE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,GAAG,CAAC,GAAGD,CAAC,CAACC,IAAI,GAAGF,CAAC,CAACE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAE,CAAC,CAChEC,KAAK,EAAE;EACZ;EAEAC,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACR,QAAQ,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;EAC/C;EAEAG,aAAa,CAACC,OAAgB;IAC5B,IAAI,CAACA,OAAO,EAAE;MACZ;;IAGF,MAAMC,GAAG,GAAG,IAAI,CAACb,QAAQ,CAACc,OAAO,CAACF,OAAO,CAAC;IAC1C,IAAIC,GAAG,GAAG,CAAC,EAAE;MACX;;IAGF,IAAI,CAACb,QAAQ,CAACe,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IAC5B,IAAI,CAACG,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAACjB,QAAQ,CAACM,KAAK,EAAE,CAAC;EACtD;;AA/BWR,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAoB,SAAdpB,cAAc;EAAAqB,YAFb;AAAM","names":["EventEmitter","MOCKCONTACTS","ContactService","constructor","contacts","getContacts","sort","a","b","name","slice","getContact","id","find","c","deleteContact","contact","pos","indexOf","splice","contactChangedEvent","emit","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\n\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<Contact[]>();\n  private contacts: Contact[] = [];\n\n  constructor() {\n    this.contacts = MOCKCONTACTS;\n  }\n\n  getContacts(): Contact[] {\n    return this.contacts\n      .sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0))\n      .slice();\n  }\n\n  getContact(id: string): Contact | null {\n    return this.contacts.find((c) => c.id === id);\n  }\n\n  deleteContact(contact: Contact) {\n    if (!contact) {\n      return;\n    }\n\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n\n    this.contacts.splice(pos, 1);\n    this.contactChangedEvent.emit(this.contacts.slice());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}