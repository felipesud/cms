{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\n// import { MOCKMESSAGES } from \"./MOCKMESSAGES\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class messageService {\n  // private maxMessageId: number;\n  constructor(http) {\n    this.http = http;\n    this.messageChangedEvent = new EventEmitter();\n    this.messageListChangedEvent = new Subject();\n    this.messages = [];\n    this.fetchMessages();\n  }\n  fetchMessages() {\n    return this.http.get(\"http://localhost:3000/messages\").subscribe(result => {\n      let messages = result.messages;\n      this.messages = messages;\n      console.log(this.messages);\n      // this.maxMessageId = this.getMaxId();\n      // messages = messages.sort((a, b) => {\n      //     if (a.id > b.id) {\n      //         return 1;\n      //     } else {\n      //         return -1;\n      //     }\n      // })\n      let messagesClone = this.messages.slice();\n      this.messageChangedEvent.next(messagesClone);\n      error => {\n        console.log(error);\n      };\n    });\n  }\n  storeMessages(message) {\n    if (!message) {\n      return;\n    }\n    message.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.http.post('http://localhost:3000/messages', message, {\n      headers: headers\n    }).subscribe(responseData => {\n      this.messages.push(responseData.message);\n      this.sortAndSend();\n    });\n    // let messageString = JSON.stringify(this.messages);\n    // this.http.put(\"https://cms-w09-default-rtdb.firebaseio.com/messages.json\", messageString)\n    //     .subscribe(response => {\n    //         let messagesClone = this.messages.slice();\n    //         this.messageChangedEvent.next(messagesClone);\n    //     });\n  }\n\n  getMaxId() {\n    let maxId = 0;\n    for (let message of this.messages) {\n      let currentId = parseInt(message.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  getMessages() {\n    return this.messages.slice();\n  }\n  getMessage(id) {\n    this.messages.forEach(function (message) {\n      if (message.id == id) {\n        return message;\n      } else if (message == this.messages[this.messages.length - 1]) {\n        return null;\n      }\n    });\n  }\n  addMessage(message) {\n    this.messages.push(message);\n    this.storeMessages(message);\n    // this.messageChangedEvent.emit(this.messages.slice());\n  }\n\n  sortAndSend() {\n    this.fetchMessages();\n  }\n}\nmessageService.ɵfac = function messageService_Factory(t) {\n  return new (t || messageService)(i0.ɵɵinject(i1.HttpClient));\n};\nmessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: messageService,\n  factory: messageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AAExD;AACA,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,OAAO,QAAQ,MAAM;;;AAM9B,OAAM,MAAOC,cAAc;EAIvB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALxB,wBAAmB,GAAG,IAAIL,YAAY,EAAa;IACnD,4BAAuB,GAAG,IAAIE,OAAO,EAAa;IAC1C,aAAQ,GAAc,EAAE;IAI5B,IAAI,CAACI,aAAa,EAAE;EACxB;EAEAA,aAAa;IACT,OAAO,IAAI,CAACD,IAAI,CACXE,GAAG,CACA,gCAAgC,CACnC,CACAC,SAAS,CAAEC,MAAW,IAAI;MACvB,IAAIC,QAAQ,GAAGD,MAAM,CAACC,QAAQ;MAC9B,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MACxBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,QAAQ,CAAC;MAC1B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAIG,aAAa,GAAG,IAAI,CAACH,QAAQ,CAACI,KAAK,EAAE;MACzC,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAACH,aAAa,CAAC;MAC3CI,KAAU,IAAI;QACXN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;MACtB,CAAC;IACL,CAAC,CAAC;EACV;EAEAC,aAAa,CAACC,OAAgB;IAC1B,IAAI,CAACA,OAAO,EAAE;MACV;;IAGJA,OAAO,CAACC,EAAE,GAAG,EAAE;IAEf,MAAMC,OAAO,GAAG,IAAIpB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE;IACA,IAAI,CAACI,IAAI,CAACiB,IAAI,CAA4C,gCAAgC,EACtFH,OAAO,EACP;MAAEE,OAAO,EAAEA;IAAO,CAAE,CAAC,CACpBb,SAAS,CACLe,YAAY,IAAI;MACb,IAAI,CAACb,QAAQ,CAACc,IAAI,CAACD,YAAY,CAACJ,OAAO,CAAC;MACxC,IAAI,CAACM,WAAW,EAAE;IACtB,CAAC,CACJ;IACL;IACA;IACA;IACA;IACA;IACA;EACJ;;EAEAC,QAAQ;IACJ,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAIR,OAAO,IAAI,IAAI,CAACT,QAAQ,EAAE;MAC/B,IAAIkB,SAAS,GAAGC,QAAQ,CAACV,OAAO,CAACC,EAAE,CAAC;MACpC,IAAIQ,SAAS,GAAGD,KAAK,EAAE;QACnBA,KAAK,GAAGC,SAAS;;;IAGzB,OAAOD,KAAK;EAChB;EAEAG,WAAW;IACP,OAAO,IAAI,CAACpB,QAAQ,CAACI,KAAK,EAAE;EAChC;EAEAiB,UAAU,CAACX,EAAU;IACjB,IAAI,CAACV,QAAQ,CAACsB,OAAO,CAAC,UAAUb,OAAO;MACnC,IAAIA,OAAO,CAACC,EAAE,IAAIA,EAAE,EAAE;QAClB,OAAOD,OAAO;OACjB,MACI,IAAIA,OAAO,IAAI,IAAI,CAACT,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACuB,MAAM,GAAC,CAAC,CAAC,EAAE;QACvD,OAAO,IAAI;;IAEnB,CAAC,CAAC;EACN;EAEAC,UAAU,CAACf,OAAgB;IACvB,IAAI,CAACT,QAAQ,CAACc,IAAI,CAACL,OAAO,CAAC;IAC3B,IAAI,CAACD,aAAa,CAACC,OAAO,CAAC;IAC3B;EACJ;;EAEAM,WAAW;IACP,IAAI,CAACnB,aAAa,EAAE;EACxB;;AAhGSH,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAgC,SAAdhC,cAAc;EAAAiC,YAHX;AAAM","names":["EventEmitter","HttpHeaders","Subject","messageService","constructor","http","fetchMessages","get","subscribe","result","messages","console","log","messagesClone","slice","messageChangedEvent","next","error","storeMessages","message","id","headers","post","responseData","push","sortAndSend","getMaxId","maxId","currentId","parseInt","getMessages","getMessage","forEach","length","addMessage","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/messages/message.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from \"@angular/core\";\nimport { Message } from \"./message.model\";\n// import { MOCKMESSAGES } from \"./MOCKMESSAGES\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class messageService {\n    messageChangedEvent = new EventEmitter<Message[]>();\n    messageListChangedEvent = new Subject<Message[]>();\n    private messages: Message[] = [];\n    // private maxMessageId: number;\n\n    constructor(private http: HttpClient) {\n        this.fetchMessages();\n    }\n\n    fetchMessages() {\n        return this.http\n            .get<Message[]>(\n                \"http://localhost:3000/messages\"\n            )\n            .subscribe((result: any) => {\n                let messages = result.messages;\n                this.messages = messages;\n                console.log(this.messages);\n                // this.maxMessageId = this.getMaxId();\n                // messages = messages.sort((a, b) => {\n                //     if (a.id > b.id) {\n                //         return 1;\n                //     } else {\n                //         return -1;\n                //     }\n                // })\n                let messagesClone = this.messages.slice();\n                this.messageChangedEvent.next(messagesClone);\n                (error: any) => {\n                    console.log(error);\n                }\n            })\n    }\n\n    storeMessages(message: Message) {\n        if (!message) {\n            return;\n        }\n\n        message.id = '';\n\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n        // add to database\n        this.http.post<{ messageInfo: string, message: Message }>('http://localhost:3000/messages',\n            message,\n            { headers: headers })\n            .subscribe(\n                (responseData) => {\n                    this.messages.push(responseData.message);\n                    this.sortAndSend();\n                }\n            );\n        // let messageString = JSON.stringify(this.messages);\n        // this.http.put(\"https://cms-w09-default-rtdb.firebaseio.com/messages.json\", messageString)\n        //     .subscribe(response => {\n        //         let messagesClone = this.messages.slice();\n        //         this.messageChangedEvent.next(messagesClone);\n        //     });\n    }\n\n    getMaxId(): number {\n        let maxId = 0;\n        for (let message of this.messages) {\n            let currentId = parseInt(message.id);\n            if (currentId > maxId) {\n                maxId = currentId;\n            }\n        }\n        return maxId;\n    }\n\n    getMessages() {\n        return this.messages.slice();\n    }\n\n    getMessage(id: string) {\n        this.messages.forEach(function (message) {\n            if (message.id == id) {\n                return message;\n            }\n            else if (message == this.messages[this.messages.length-1]) {\n                return null;\n            }\n        });\n    }\n\n    addMessage(message: Message) {\n        this.messages.push(message);\n        this.storeMessages(message);\n        // this.messageChangedEvent.emit(this.messages.slice());\n    }\n\n    sortAndSend() {\n        this.fetchMessages();\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}