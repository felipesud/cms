{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// import { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nexport class DocumentService {\n  constructor(http) {\n    this.http = http;\n    this.documentListChangedEvent = new Subject();\n    this.documents = [];\n    // this.documents = MOCKDOCUMENTS;\n    this.documents = this.documents;\n    this.getDocuments();\n    // this.maxDocumentId = this.getMaxId();\n  }\n\n  getDocuments() {\n    // return this.documents.slice();\n    return this.http.get('https://felipe-125b2-default-rtdb.firebaseio.com/documents.json').subscribe(documents => {\n      this.documents = documents;\n      // this.maxDocumentId = this.getMaxId();\n      this.documents.sort((a, b) => a?.name > b?.name ? 1 : b?.name > a?.name ? -1 : 0);\n      this.documentListChangedEvent.next(this.documents.slice());\n    }), error => {\n      console.log('Error: ', error);\n    };\n  }\n  getDocument(id) {\n    return this.documents.find(document => document.id === id);\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const document of this.documents) {\n      const currentId = Number(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addDocument(newDocument) {\n    if (!newDocument) {\n      return;\n    }\n    this.maxDocumentId = this.getMaxId();\n    this.maxDocumentId++;\n    // console.log(this.maxDocumentId);\n    newDocument.id = this.maxDocumentId.toString();\n    this.documents.push(newDocument);\n    // const documentsListClone = this.documents.slice();\n    // this.documentListChangedEvent.next(documentsListClone);\n    this.storeDocuments();\n    this.documents.sort((a, b) => a?.name > b?.name ? 1 : b?.name > a?.name ? -1 : 0);\n  }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    // const documentsListClone = this.documents.slice();\n    // this.documentListChangedEvent.next(documentsListClone);\n    this.storeDocuments();\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    // const documentsListClone = this.documents.slice();\n    // this.documentListChangedEvent.next(documentsListClone);\n    this.storeDocuments();\n  }\n  storeDocuments() {\n    const documents = JSON.stringify(this.documents);\n    const headers = new HttpHeaders().set('Content-Type', 'application/Json');\n    this.http.put('https://felipe-125b2-default-rtdb.firebaseio.com/documents.json', documents, {\n      headers\n    }).subscribe(() => {\n      const cloneDocuments = this.documents.slice();\n      this.documentListChangedEvent.next(cloneDocuments);\n    });\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","Subject","DocumentService","constructor","http","documents","getDocuments","get","subscribe","sort","a","b","name","documentListChangedEvent","next","slice","error","console","log","getDocument","id","find","document","getMaxId","maxId","currentId","Number","addDocument","newDocument","maxDocumentId","toString","push","storeDocuments","updateDocument","originalDocument","pos","indexOf","deleteDocument","splice","JSON","stringify","headers","set","put","cloneDocuments","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/documents/document.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\nimport { Document } from './document.model';\n// import { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentService {\n  documentListChangedEvent = new Subject<Document[]>();\n  documents: Document[] = [];\n  maxDocumentId: number;\n\n  constructor(private http: HttpClient) {\n    // this.documents = MOCKDOCUMENTS;\n    this.documents = this.documents;\n    this.getDocuments();\n    // this.maxDocumentId = this.getMaxId();\n  }\n\n  getDocuments() {\n    // return this.documents.slice();\n    return (\n      this.http\n        .get<Document[]>(\n          'https://felipe-125b2-default-rtdb.firebaseio.com/documents.json'\n        )\n        .subscribe((documents: Document[]) => {\n          this.documents = documents;\n          // this.maxDocumentId = this.getMaxId();\n          this.documents.sort((a, b) =>\n            a?.name > b?.name ? 1 : b?.name > a?.name ? -1 : 0\n          );\n          this.documentListChangedEvent.next(this.documents.slice());\n        }),\n      (error: any) => {\n        console.log('Error: ', error);\n      }\n    );\n  }\n\n  getDocument(id: string) {\n    return this.documents.find((document) => document.id === id);\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n\n    for (const document of this.documents) {\n      const currentId = Number(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  addDocument(newDocument: Document) {\n    if (!newDocument) {\n      return;\n    }\n\n    this.maxDocumentId = this.getMaxId();\n\n    this.maxDocumentId++;\n    // console.log(this.maxDocumentId);\n    newDocument.id = this.maxDocumentId.toString();\n    this.documents.push(newDocument);\n    // const documentsListClone = this.documents.slice();\n    // this.documentListChangedEvent.next(documentsListClone);\n    this.storeDocuments();\n    this.documents.sort((a, b) =>\n      a?.name > b?.name ? 1 : b?.name > a?.name ? -1 : 0\n    );\n  }\n\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n\n    // const documentsListClone = this.documents.slice();\n    // this.documentListChangedEvent.next(documentsListClone);\n    this.storeDocuments();\n  }\n\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n\n    this.documents.splice(pos, 1);\n    // const documentsListClone = this.documents.slice();\n    // this.documentListChangedEvent.next(documentsListClone);\n    this.storeDocuments();\n  }\n\n  storeDocuments() {\n    const documents = JSON.stringify(this.documents);\n    const headers = new HttpHeaders().set('Content-Type', 'application/Json');\n    this.http\n      .put(\n        'https://felipe-125b2-default-rtdb.firebaseio.com/documents.json',\n        documents,\n        { headers }\n      )\n      .subscribe(() => {\n        const cloneDocuments = this.documents.slice();\n        this.documentListChangedEvent.next(cloneDocuments);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}