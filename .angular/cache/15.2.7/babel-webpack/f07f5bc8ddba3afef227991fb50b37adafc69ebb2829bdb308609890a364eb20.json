{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from \"rxjs\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class contactService {\n  constructor(http) {\n    this.http = http;\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contactListChangedEvent = new Subject();\n    this.contacts = [];\n    this.fetchContacts();\n  }\n  fetchContacts() {\n    return this.http.get(\"http://localhost:3000/contacts\").subscribe(result => {\n      let contacts = result.contacts;\n      this.contacts = contacts;\n      // console.log(contacts);\n      this.maxContactId = this.getMaxId();\n      contacts = contacts.sort((a, b) => {\n        if (a.id > b.id) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      let contactsListClone = this.contacts.slice();\n      this.contactListChangedEvent.next(contactsListClone);\n      error => {\n        console.log(error);\n      };\n    });\n  }\n  storeContacts(contact) {\n    if (!contact) {\n      return;\n    }\n    contact.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.http.post('http://localhost:3000/contacts', contact, {\n      headers: headers\n    }).subscribe(responseData => {\n      this.contacts.push(responseData.contact);\n      this.sortAndSend();\n    });\n  }\n  getContacts() {\n    return this.contacts.slice();\n  }\n  getContact(index) {\n    // return this.http\n    //     .get<Contact[]>(\n    //         \"http://localhost:3000/contacts\"\n    //     )\n    //     .subscribe((result: any) => {\n    //         let contacts = result.contacts;\n    //         this.contacts = contacts;\n    //         for (let contact of this.contacts) {\n    //             if (index == contact._id) {\n    //                 console.log(contact);\n    //                 return contact;\n    //             }\n    //             console.log(contact);\n    //         }\n    //         // console.log(contacts);\n    //         // this.maxContactId = this.getMaxId();\n    //         // contacts = contacts.sort((a, b) => {\n    //         //     if (a.id > b.id) {\n    //         //         return 1;\n    //         //     } else {\n    //         //         return -1;\n    //         //     }\n    //         // })\n    //         // let contactsListClone = this.contacts.slice();\n    //         // this.contactListChangedEvent.next(contactsListClone);\n    //         (error: any) => {\n    //             console.log(error);\n    //         }\n    //     })\n    // console.log(index);\n    // return this.http\n    //     .get<Contact[]>(\n    //         \"http://localhost:3000/contacts/\" + index\n    //     )\n    //     .subscribe((result: any) => {\n    //         let sender = result.contact;\n    //         // return sender;\n    //         console.log(sender);\n    //         (error: any) => {\n    //             console.log(error);\n    //         }\n    //     })\n    // console.log(index);\n    // console.log(this.contacts);\n    // console.log(this.contacts[index]);\n    // for (let contact of this.contacts) {\n    //     if (index == contact._id) {\n    //         console.log(contact);\n    //         return contact;\n    //     }\n    //     console.log(contact);\n    // }\n    return this.contacts[index];\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let contact of this.contacts) {\n      let currentId = parseInt(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact) {\n    if (!newContact) {\n      return;\n    }\n    this.maxContactId++;\n    newContact.id = this.maxContactId.toString();\n    this.contacts.push(newContact);\n    this.storeContacts(newContact);\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.findIndex(d => d.id === originalContact.id);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    newContact._id = originalContact._id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.http.put('http://localhost:3000/contacts/' + originalContact.id, newContact, {\n      headers: headers\n    }).subscribe(response => {\n      this.contacts[pos] = newContact;\n      this.sortAndSend();\n    });\n  }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.findIndex(d => d.id === contact.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.http.delete('http://localhost:3000/contacts/' + contact.id).subscribe(response => {\n      this.contacts = this.contacts.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  sortAndSend() {\n    this.fetchContacts();\n  }\n}\ncontactService.ɵfac = function contactService_Factory(t) {\n  return new (t || contactService)(i0.ɵɵinject(i1.HttpClient));\n};\ncontactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: contactService,\n  factory: contactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;AACxD,SAASC,OAAO,QAAQ,MAAM;AAC9B,SAAqBC,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,cAAc;EAQvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPxB,yBAAoB,GAAG,IAAIL,YAAY,EAAW;IAClD,wBAAmB,GAAG,IAAIA,YAAY,EAAa;IACnD,4BAAuB,GAAG,IAAIC,OAAO,EAAa;IAE1C,aAAQ,GAAc,EAAE;IAI5B,IAAI,CAACK,aAAa,EAAE;EACxB;EAEAA,aAAa;IACT,OAAO,IAAI,CAACD,IAAI,CACXE,GAAG,CACA,gCAAgC,CACnC,CACAC,SAAS,CAAEC,MAAW,IAAI;MACvB,IAAIC,QAAQ,GAAGD,MAAM,CAACC,QAAQ;MAC9B,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MACxB;MACA,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;MACnCF,QAAQ,GAAGA,QAAQ,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QAC9B,IAAID,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,EAAE;UACb,OAAO,CAAC;SACX,MAAM;UACH,OAAO,CAAC,CAAC;;MAEjB,CAAC,CAAC;MACF,IAAIC,iBAAiB,GAAG,IAAI,CAACP,QAAQ,CAACQ,KAAK,EAAE;MAC7C,IAAI,CAACC,uBAAuB,CAACC,IAAI,CAACH,iBAAiB,CAAC;MACnDI,KAAU,IAAI;QACXC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACtB,CAAC;IACL,CAAC,CAAC;EACV;EAEAG,aAAa,CAACC,OAAgB;IAC1B,IAAI,CAACA,OAAO,EAAE;MACV;;IAGJA,OAAO,CAACT,EAAE,GAAG,EAAE;IAEf,MAAMU,OAAO,GAAG,IAAIxB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE;IACA,IAAI,CAACG,IAAI,CAACsB,IAAI,CAAwC,gCAAgC,EACtFF,OAAO,EACH;MAAEC,OAAO,EAAEA;IAAO,CAAE,CAAC,CACpBlB,SAAS,CACLoB,YAAY,IAAI;MACb,IAAI,CAAClB,QAAQ,CAACmB,IAAI,CAACD,YAAY,CAACH,OAAO,CAAC;MACxC,IAAI,CAACK,WAAW,EAAE;IACtB,CAAC,CACJ;EACT;EAEAC,WAAW;IACP,OAAO,IAAI,CAACrB,QAAQ,CAACQ,KAAK,EAAE;EAChC;EAEAc,UAAU,CAACC,KAAa;IACpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA,OAAO,IAAI,CAACvB,QAAQ,CAACuB,KAAK,CAAC;EAE/B;EAEArB,QAAQ;IACJ,IAAIsB,KAAK,GAAG,CAAC;IACb,KAAK,IAAIT,OAAO,IAAI,IAAI,CAACf,QAAQ,EAAE;MAC/B,IAAIyB,SAAS,GAAGC,QAAQ,CAACX,OAAO,CAACT,EAAE,CAAC;MACpC,IAAImB,SAAS,GAAGD,KAAK,EAAE;QACnBA,KAAK,GAAGC,SAAS;;;IAGzB,OAAOD,KAAK;EAChB;EAEAG,UAAU,CAACC,UAAmB;IAC1B,IAAI,CAACA,UAAU,EAAE;MACb;;IAEJ,IAAI,CAAC3B,YAAY,EAAE;IACnB2B,UAAU,CAACtB,EAAE,GAAG,IAAI,CAACL,YAAY,CAAC4B,QAAQ,EAAE;IAC5C,IAAI,CAAC7B,QAAQ,CAACmB,IAAI,CAACS,UAAU,CAAC;IAC9B,IAAI,CAACd,aAAa,CAACc,UAAU,CAAC;EAClC;EAEAE,aAAa,CAACC,eAAwB,EAAEH,UAAmB;IACvD,IAAI,CAACG,eAAe,IAAI,CAACH,UAAU,EAAE;MACjC;;IAGJ,MAAMI,GAAG,GAAG,IAAI,CAAChC,QAAQ,CAACiC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC5B,EAAE,KAAKyB,eAAe,CAACzB,EAAE,CAAC;IAErE,IAAI0B,GAAG,GAAG,CAAC,EAAE;MACT;;IAGJJ,UAAU,CAACtB,EAAE,GAAGyB,eAAe,CAACzB,EAAE;IAClCsB,UAAU,CAACO,GAAG,GAAGJ,eAAe,CAACI,GAAG;IAEpC,MAAMnB,OAAO,GAAG,IAAIxB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE;IACA,IAAI,CAACG,IAAI,CAACyC,GAAG,CAAC,iCAAiC,GAAGL,eAAe,CAACzB,EAAE,EAChEsB,UAAU,EAAE;MAAEZ,OAAO,EAAEA;IAAO,CAAE,CAAC,CAChClB,SAAS,CACLuC,QAAkB,IAAI;MACnB,IAAI,CAACrC,QAAQ,CAACgC,GAAG,CAAC,GAAGJ,UAAU;MAC/B,IAAI,CAACR,WAAW,EAAE;IACtB,CAAC,CACJ;EACT;EAEAkB,aAAa,CAACvB,OAAgB;IAC1B,IAAI,CAACA,OAAO,EAAE;MACV;;IAGJ,MAAMiB,GAAG,GAAG,IAAI,CAAChC,QAAQ,CAACiC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC5B,EAAE,KAAKS,OAAO,CAACT,EAAE,CAAC;IAE7D,IAAI0B,GAAG,GAAG,CAAC,EAAE;MACT;;IAGJ;IACA,IAAI,CAACrC,IAAI,CAAC4C,MAAM,CAAC,iCAAiC,GAAGxB,OAAO,CAACT,EAAE,CAAC,CAC3DR,SAAS,CACLuC,QAAkB,IAAI;MACnB,IAAI,CAACrC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACwC,MAAM,CAACR,GAAG,EAAE,CAAC,CAAC;MAC5C,IAAI,CAACZ,WAAW,EAAE;IACtB,CAAC,CACJ;EACT;EACAA,WAAW;IACP,IAAI,CAACxB,aAAa,EAAE;EACxB;;AAjMSH,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAgD,SAAdhD,cAAc;EAAAiD,YAHX;AAAM","names":["EventEmitter","Subject","HttpHeaders","contactService","constructor","http","fetchContacts","get","subscribe","result","contacts","maxContactId","getMaxId","sort","a","b","id","contactsListClone","slice","contactListChangedEvent","next","error","console","log","storeContacts","contact","headers","post","responseData","push","sortAndSend","getContacts","getContact","index","maxId","currentId","parseInt","addContact","newContact","toString","updateContact","originalContact","pos","findIndex","d","_id","put","response","deleteContact","delete","splice","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Subject } from \"rxjs\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Contact } from \"./contact.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class contactService {\n    contactSelectedEvent = new EventEmitter<Contact>();\n    contactChangedEvent = new EventEmitter<Contact[]>();\n    contactListChangedEvent = new Subject<Contact[]>();\n\n    private contacts: Contact[] = [];\n    private maxContactId: number;\n\n    constructor(private http: HttpClient) {\n        this.fetchContacts();\n    }\n\n    fetchContacts() {\n        return this.http\n            .get<Contact[]>(\n                \"http://localhost:3000/contacts\"\n            )\n            .subscribe((result: any) => {\n                let contacts = result.contacts;\n                this.contacts = contacts;\n                // console.log(contacts);\n                this.maxContactId = this.getMaxId();\n                contacts = contacts.sort((a, b) => {\n                    if (a.id > b.id) {\n                        return 1;\n                    } else {\n                        return -1;\n                    }\n                })\n                let contactsListClone = this.contacts.slice();\n                this.contactListChangedEvent.next(contactsListClone);\n                (error: any) => {\n                    console.log(error);\n                }\n            })\n    }\n\n    storeContacts(contact: Contact) {\n        if (!contact) {\n            return;\n        }\n\n        contact.id = '';\n\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n        // add to database\n        this.http.post<{ message: string, contact: Contact }>('http://localhost:3000/contacts',\n        contact,\n            { headers: headers })\n            .subscribe(\n                (responseData) => {\n                    this.contacts.push(responseData.contact);\n                    this.sortAndSend();\n                }\n            );\n    }\n\n    getContacts() {\n        return this.contacts.slice();\n    }\n\n    getContact(index: string) {\n        // return this.http\n        //     .get<Contact[]>(\n        //         \"http://localhost:3000/contacts\"\n        //     )\n        //     .subscribe((result: any) => {\n        //         let contacts = result.contacts;\n        //         this.contacts = contacts;\n        //         for (let contact of this.contacts) {\n        //             if (index == contact._id) {\n        //                 console.log(contact);\n        //                 return contact;\n        //             }\n        //             console.log(contact);\n        //         }\n        //         // console.log(contacts);\n        //         // this.maxContactId = this.getMaxId();\n        //         // contacts = contacts.sort((a, b) => {\n        //         //     if (a.id > b.id) {\n        //         //         return 1;\n        //         //     } else {\n        //         //         return -1;\n        //         //     }\n        //         // })\n        //         // let contactsListClone = this.contacts.slice();\n        //         // this.contactListChangedEvent.next(contactsListClone);\n        //         (error: any) => {\n        //             console.log(error);\n        //         }\n        //     })\n        \n        // console.log(index);\n        // return this.http\n        //     .get<Contact[]>(\n        //         \"http://localhost:3000/contacts/\" + index\n        //     )\n        //     .subscribe((result: any) => {\n        //         let sender = result.contact;\n        //         // return sender;\n        //         console.log(sender);\n        //         (error: any) => {\n        //             console.log(error);\n        //         }\n        //     })\n        // console.log(index);\n        // console.log(this.contacts);\n        // console.log(this.contacts[index]);\n\n        // for (let contact of this.contacts) {\n        //     if (index == contact._id) {\n        //         console.log(contact);\n        //         return contact;\n        //     }\n        //     console.log(contact);\n        // }\n\n        \n        return this.contacts[index];\n\n    }\n\n    getMaxId(): number {\n        let maxId = 0;\n        for (let contact of this.contacts) {\n            let currentId = parseInt(contact.id);\n            if (currentId > maxId) {\n                maxId = currentId;\n            }\n        }\n        return maxId;\n    }\n\n    addContact(newContact: Contact) {\n        if (!newContact) {\n            return;\n        }\n        this.maxContactId++;\n        newContact.id = this.maxContactId.toString();\n        this.contacts.push(newContact);\n        this.storeContacts(newContact);\n    }\n\n    updateContact(originalContact: Contact, newContact: Contact) {\n        if (!originalContact || !newContact) {\n            return;\n        }\n\n        const pos = this.contacts.findIndex(d => d.id === originalContact.id);\n\n        if (pos < 0) {\n            return;\n        }\n\n        newContact.id = originalContact.id;\n        newContact._id = originalContact._id;\n\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n        // update database\n        this.http.put('http://localhost:3000/contacts/' + originalContact.id,\n            newContact, { headers: headers })\n            .subscribe(\n                (response: Response) => {\n                    this.contacts[pos] = newContact;\n                    this.sortAndSend();\n                }\n            );\n    }\n    \n    deleteContact(contact: Contact) {\n        if (!contact) {\n            return;\n        }\n\n        const pos = this.contacts.findIndex(d => d.id === contact.id);\n\n        if (pos < 0) {\n            return;\n        }\n\n        // delete from database\n        this.http.delete('http://localhost:3000/contacts/' + contact.id)\n            .subscribe(\n                (response: Response) => {\n                    this.contacts = this.contacts.splice(pos, 1);\n                    this.sortAndSend();\n                }\n            );\n    }\n    sortAndSend() {\n        this.fetchContacts();\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}