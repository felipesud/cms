{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class documentService {\n  constructor(http) {\n    this.http = http;\n    this.documentSelectedEvent = new EventEmitter();\n    this.documentChangedEvent = new EventEmitter();\n    this.documentListChangedEvent = new Subject();\n    this.documents = [];\n    this.fetchDocuments();\n  }\n  fetchDocuments() {\n    return this.http.get(\"http://localhost:3000/documents\").subscribe(result => {\n      let documents = result.documents;\n      this.documents = documents;\n      // console.log(documents);\n      this.maxDocumentId = this.getMaxId();\n      documents = documents.sort((a, b) => {\n        if (a.id > b.id) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      let documentsListClone = this.documents.slice();\n      this.documentListChangedEvent.next(documentsListClone);\n      error => {\n        console.log(error);\n      };\n    });\n  }\n  storeDocuments(document) {\n    if (!document) {\n      return;\n    }\n    // make sure id of the new Document is empty\n    document.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.http.post('http://localhost:3000/documents', document, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new document to documents\n      this.documents.push(responseData.document);\n      this.sortAndSend();\n    });\n  }\n  getDocuments() {\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    return this.documents[id];\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (let document of this.documents) {\n      let currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addDocument(newDocument) {\n    if (!newDocument) {\n      return;\n    }\n    this.maxDocumentId++;\n    newDocument.id = this.maxDocumentId.toString();\n    this.documents.push(newDocument);\n    this.storeDocuments(newDocument);\n  }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n    if (pos < 0) {\n      return;\n    }\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    newDocument._id = originalDocument._id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.http.put('http://localhost:3000/documents/' + originalDocument.id, newDocument, {\n      headers: headers\n    }).subscribe(response => {\n      this.documents[pos] = newDocument;\n      this.sortAndSend();\n    });\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === document.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.http.delete('http://localhost:3000/documents/' + document.id).subscribe(response => {\n      this.documents = this.documents.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  sortAndSend() {\n    this.fetchDocuments();\n  }\n}\ndocumentService.ɵfac = function documentService_Factory(t) {\n  return new (t || documentService)(i0.ɵɵinject(i1.HttpClient));\n};\ndocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: documentService,\n  factory: documentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Subject","EventEmitter","HttpHeaders","documentService","constructor","http","fetchDocuments","get","subscribe","result","documents","maxDocumentId","getMaxId","sort","a","b","id","documentsListClone","slice","documentListChangedEvent","next","error","console","log","storeDocuments","document","headers","post","responseData","push","sortAndSend","getDocuments","getDocument","maxId","currentId","parseInt","addDocument","newDocument","toString","updateDocument","originalDocument","pos","findIndex","d","_id","put","response","deleteDocument","delete","splice","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/documents/document.service.ts"],"sourcesContent":["import { Subject } from \"rxjs\";\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Document } from \"./document.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class documentService {\n    documentSelectedEvent = new EventEmitter<Document>();\n    documentChangedEvent = new EventEmitter<Document[]>();\n    documentListChangedEvent = new Subject<Document[]>();\n\n    private documents: Document[] = [];\n    private maxDocumentId: number;\n\n    constructor(private http: HttpClient) {\n        this.fetchDocuments();\n    }\n\n    fetchDocuments() {\n        return this.http\n            .get<Document[]>(\n                \"http://localhost:3000/documents\"\n            )\n            .subscribe((result: any) => {\n                let documents = result.documents;\n                this.documents = documents;\n                // console.log(documents);\n                this.maxDocumentId = this.getMaxId();\n                documents = documents.sort((a, b) => {\n                    if (a.id > b.id) {\n                        return 1;\n                    } else {\n                        return -1;\n                    }\n                })\n                let documentsListClone = this.documents.slice();\n                this.documentListChangedEvent.next(documentsListClone);\n                (error: any) => {\n                    console.log(error);\n                }\n            })\n    }\n\n    storeDocuments(document: Document) {\n        if (!document) {\n            return;\n        }\n\n        // make sure id of the new Document is empty\n        document.id = '';\n\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n        // add to database\n        this.http.post<{ message: string, document: Document }>('http://localhost:3000/documents',\n            document,\n            { headers: headers })\n            .subscribe(\n                (responseData) => {\n                    // add new document to documents\n                    this.documents.push(responseData.document);\n                    this.sortAndSend();\n                }\n            );\n    }\n\n    getDocuments() {\n        return this.documents.slice();\n    }\n\n    getDocument(id: string) {\n        return this.documents[id];\n    }\n\n    getMaxId(): number {\n        let maxId = 0;\n        for (let document of this.documents) {\n            let currentId = parseInt(document.id);\n            if (currentId > maxId) {\n                maxId = currentId;\n            }\n        }\n        return maxId;\n    }\n\n\n    addDocument(newDocument: Document) {\n        if (!newDocument) {\n            return;\n        }\n        this.maxDocumentId++;\n        newDocument.id = this.maxDocumentId.toString();\n        this.documents.push(newDocument);\n        this.storeDocuments(newDocument);\n    }\n\n    updateDocument(originalDocument: Document, newDocument: Document) {\n        if (!originalDocument || !newDocument) {\n            return;\n        }\n\n        const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n\n        if (pos < 0) {\n            return;\n        }\n\n        // set the id of the new Document to the id of the old Document\n        newDocument.id = originalDocument.id;\n        newDocument._id = originalDocument._id;\n\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n        // update database\n        this.http.put('http://localhost:3000/documents/' + originalDocument.id,\n            newDocument, { headers: headers })\n            .subscribe(\n                (response: Response) => {\n                    this.documents[pos] = newDocument;\n                    this.sortAndSend();\n                }\n            );\n    }\n\n\n    deleteDocument(document: Document) {\n        if (!document) {\n            return;\n        }\n\n        const pos = this.documents.findIndex(d => d.id === document.id);\n\n        if (pos < 0) {\n            return;\n        }\n\n        // delete from database\n        this.http.delete('http://localhost:3000/documents/' + document.id)\n            .subscribe(\n                (response: Response) => {\n                    this.documents = this.documents.splice(pos, 1);\n                    this.sortAndSend();\n                }\n            );\n    }\n\n    sortAndSend() {\n        this.fetchDocuments();\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}