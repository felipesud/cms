{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactListChangedEvent = new Subject();\n    this.contacts = [];\n    // this.contacts = MOCKCONTACTS;\n    // this.maxContactId = this.getMaxId();\n    this.getContacts();\n  }\n  getContacts() {\n    // console.log('Getting all contacts.');\n    return this.http.get('https://felipe-125b2-default-rtdb.firebaseio.com/contacts').subscribe(contacts => {\n      this.contacts = contacts;\n      this.contacts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0);\n      this.contactListChangedEvent.next(this.contacts.slice());\n    }), error => {\n      console.log('Error: ', error);\n    };\n  }\n  getContact(id) {\n    // console.log('Getting a contact.');\n    return this.contacts.find(c => c.id === id);\n  }\n  getMaxId() {\n    // console.log('Getting the contacts maxId.');\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = Number(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  // Add contact will be called by the ContactEditComponent Save button\n  addContact(newContact) {\n    // console.log('Adding a contact.');\n    if (!newContact) {\n      return;\n    }\n    this.maxContactId = this.getMaxId();\n    this.maxContactId++;\n    newContact.id = this.maxContactId.toString();\n    this.contacts.push(newContact);\n    // const contactsCloneList = this.contacts.slice();\n    // this.contactListChangedEvent.next(contactsCloneList);\n    this.storeContacts();\n    this.contacts.sort((a, b) => a.name > b.name ? 1 : b.name ? -1 : 0);\n  }\n  // Update contact will be called by the ContactEditComponent Save button\n  updateContact(originalContact, newContact) {\n    // console.log('Updating a contact.');\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n    this.storeContacts();\n  }\n  // Delete contact will be called by the ContactDetailComponent Delete button\n  deleteContact(contact) {\n    // console.log('Deleting a contact.');\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n    this.storeContacts();\n  }\n  storeContacts() {\n    const contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders().set('Content-Type', 'application/JsonPipe');\n    this.http.put('https://felipe-125b2-default-rtdb.firebaseio.com/contacts', contacts, {\n      headers\n    }).subscribe(() => {\n      const cloneContacts = this.contacts.slice();\n      this.contactListChangedEvent.next(cloneContacts);\n    });\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","Subject","ContactService","constructor","http","getContacts","get","subscribe","contacts","sort","a","b","name","contactListChangedEvent","next","slice","error","console","log","getContact","id","find","c","getMaxId","maxId","contact","currentId","Number","addContact","newContact","maxContactId","toString","push","storeContacts","updateContact","originalContact","pos","indexOf","contactsListClone","deleteContact","splice","JSON","stringify","headers","set","put","cloneContacts","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\nimport { Contact } from './contact.model';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactService {\n  contactListChangedEvent = new Subject<Contact[]>();\n  private contacts: Contact[] = [];\n  maxContactId: number;\n\n  constructor(private http: HttpClient) {\n    // this.contacts = MOCKCONTACTS;\n    // this.maxContactId = this.getMaxId();\n    this.getContacts();\n  }\n\n  getContacts() {\n    // console.log('Getting all contacts.');\n    return (\n      this.http\n        .get<Contact[]>(\n          'https://felipe-125b2-default-rtdb.firebaseio.com/contacts'\n        )\n        .subscribe((contacts: Contact[]) => {\n          this.contacts = contacts;\n          this.contacts.sort((a, b) =>\n            a.name > b.name ? 1 : b.name > a.name ? -1 : 0\n          );\n          this.contactListChangedEvent.next(this.contacts.slice());\n        }),\n      (error: any) => {\n        console.log('Error: ', error);\n      }\n    );\n  }\n\n  getContact(id: string): Contact | null {\n    // console.log('Getting a contact.');\n    return this.contacts.find((c) => c.id === id);\n  }\n\n  getMaxId(): number {\n    // console.log('Getting the contacts maxId.');\n    let maxId = 0;\n\n    for (const contact of this.contacts) {\n      const currentId = Number(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  // Add contact will be called by the ContactEditComponent Save button\n  addContact(newContact: Contact) {\n    // console.log('Adding a contact.');\n    if (!newContact) {\n      return;\n    }\n\n    this.maxContactId = this.getMaxId();\n\n    this.maxContactId++;\n    newContact.id = this.maxContactId.toString();\n    this.contacts.push(newContact);\n    // const contactsCloneList = this.contacts.slice();\n    // this.contactListChangedEvent.next(contactsCloneList);\n    this.storeContacts();\n    this.contacts.sort((a, b) => (a.name > b.name ? 1 : b.name ? -1 : 0));\n  }\n\n  // Update contact will be called by the ContactEditComponent Save button\n  updateContact(originalContact: Contact, newContact: Contact) {\n    // console.log('Updating a contact.');\n    if (!originalContact || !newContact) {\n      return;\n    }\n\n    const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n\n    this.storeContacts();\n  }\n\n  // Delete contact will be called by the ContactDetailComponent Delete button\n  deleteContact(contact: Contact) {\n    // console.log('Deleting a contact.');\n    if (!contact) {\n      return;\n    }\n\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n\n    this.contacts.splice(pos, 1);\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n\n    this.storeContacts();\n  }\n\n  storeContacts() {\n    const contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/JsonPipe'\n    );\n    this.http\n      .put(\n        'https://felipe-125b2-default-rtdb.firebaseio.com/contacts',\n        contacts,\n        { headers }\n      )\n      .subscribe(() => {\n        const cloneContacts = this.contacts.slice();\n        this.contactListChangedEvent.next(cloneContacts);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}