{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ContactService {\n  constructor() {\n    this.contacts = [];\n    this.contactListChangedEvent = new Subject();\n    this.contactSelectedEvent = new EventEmitter();\n    this.contactChangedEvent = new EventEmitter();\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxId();\n  }\n  getContacts() {\n    //  return the list of contacts\n    return this.contacts.slice();\n  }\n  getContact(id) {\n    console.log('here');\n    console.log(this.contacts.find(contact => contact.id === id));\n    return this.contacts.find(contact => contact.id === id);\n  }\n  deleteContact(contact) {\n    if (!contact) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      // . If the index is negative, the document was not found and the method is aborted.\n      return;\n    }\n    this.contacts.splice(pos, 1);\n    // this.contactChangedEvent.emit(this.contacts.slice());\n    this.contactListChangedEvent.next(this.contacts.slice());\n  }\n  updateContact(originalContact, newContact) {\n    if (originalContact == null || originalContact == undefined || newContact == null || newContact == undefined) {\n      console.log('stuck here?');\n      return;\n    }\n    console.log('qwer');\n    let pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    this.contacts[pos] = newContact;\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n  }\n  getMaxId() {\n    let maxId = 0;\n    // let currentId;\n    for (const contact of this.contacts) {\n      let currentId = Number(contact.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact) {\n    if (!newContact) {\n      return;\n    }\n    this.maxContactId++;\n    newContact.id = this.maxContactId.toString();\n    this.contacts.push(newContact);\n    const contactsListClone = this.contacts.slice();\n    this.contactListChangedEvent.next(contactsListClone);\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","MOCKCONTACTS","Subject","ContactService","constructor","contacts","maxContactId","getMaxId","getContacts","slice","getContact","id","console","log","find","contact","deleteContact","pos","indexOf","splice","contactListChangedEvent","next","updateContact","originalContact","newContact","undefined","contactsListClone","maxId","currentId","Number","addContact","toString","push","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Contact } from './contact.model';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { Subject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  contacts: Contact[] = [];\n\n  maxContactId: number;\n\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  contactSelectedEvent = new EventEmitter<Contact>();\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  constructor() {\n    this.contacts = MOCKCONTACTS;\n    this.maxContactId = this.getMaxId();\n  }\n\n  getContacts(): Contact[]{\n    //  return the list of contacts\n    return this.contacts.slice();\n  }\n  getContact(id: string): Contact {\n    console.log('here')\n    console.log(this.contacts.find((contact) => contact.id === id))\n    return this.contacts.find((contact) => contact.id === id);\n  }\n  deleteContact(contact: Contact){\n  if (!contact) {\n     return;\n  }\n  const pos = this.contacts.indexOf(contact);\n  if (pos < 0) { // . If the index is negative, the document was not found and the method is aborted.\n     return;\n  }\n  this.contacts.splice(pos, 1);\n  // this.contactChangedEvent.emit(this.contacts.slice());\n  this.contactListChangedEvent.next(this.contacts.slice())\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n\n    if (originalContact == null || originalContact == undefined || newContact == null || newContact == undefined)\n    {\n      console.log('stuck here?')\n      return\n    }    \n\n    console.log('qwer')\n\n    let pos = this.contacts.indexOf(originalContact)\n    if(pos < 0){\n      return\n    }\n\n    newContact.id = originalContact.id\n    this.contacts[pos] = newContact\n    const contactsListClone = this.contacts.slice()\n    this.contactListChangedEvent.next(contactsListClone)\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    // let currentId;\n\n    for (const contact of this.contacts){\n      let currentId = Number(contact.id);\n      if(currentId > maxId){\n        maxId = currentId;\n      }\n    }\n\n    return maxId\n  }\n\n  addContact(newContact: Contact) {\n    if (!newContact){\n      return;\n    }\n\n    this.maxContactId++\n    newContact.id = this.maxContactId.toString();\n    this.contacts.push(newContact)\n    const contactsListClone = this.contacts.slice()\n    this.contactListChangedEvent.next(contactsListClone)\n  }\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}