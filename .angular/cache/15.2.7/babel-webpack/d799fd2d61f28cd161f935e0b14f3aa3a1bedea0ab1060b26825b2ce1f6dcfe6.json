{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport * as i0 from \"@angular/core\";\nexport class DocumentService {\n  constructor() {\n    this.documents = [];\n    this.documentListChangedEvent = new Subject();\n    this.documentSelectedEvent = new EventEmitter();\n    this.documents = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxId();\n  }\n  addDocument(newDocument) {\n    if (!newDocument) {\n      return;\n    }\n    this.maxDocumentId++;\n    newDocument.id = `${this.maxDocumentId}`;\n    this.documents.push(newDocument);\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n  getDocuments() {\n    return this.documents.slice();\n  }\n  getDocument(id) {\n    return this.documents.find(document => document.id === id) || null;\n  }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const document of this.documents) {\n      const currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)();\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;AACxD,SAASC,OAAO,QAAQ,MAAM;AAE9B,SAASC,aAAa,QAAQ,iBAAiB;;AAK/C,OAAM,MAAOC,eAAe;EAM1BC;IALA,cAAS,GAAe,EAAE;IAE1B,6BAAwB,GAAG,IAAIH,OAAO,EAAc;IACpD,0BAAqB,GAAG,IAAID,YAAY,EAAY;IAGlD,IAAI,CAACK,SAAS,GAAGH,aAAa;IAC9B,IAAI,CAACI,aAAa,GAAG,IAAI,CAACC,QAAQ,EAAE;EACtC;EAEAC,WAAW,CAACC,WAAqB;IAC/B,IAAI,CAACA,WAAW,EAAE;MAChB;;IAGF,IAAI,CAACH,aAAa,EAAE;IACpBG,WAAW,CAACC,EAAE,GAAG,GAAG,IAAI,CAACJ,aAAa,EAAE;IACxC,IAAI,CAACD,SAAS,CAACM,IAAI,CAACF,WAAW,CAAC;IAChC,MAAMG,kBAAkB,GAAG,IAAI,CAACP,SAAS,CAACQ,KAAK,EAAE;IACjD,IAAI,CAACC,wBAAwB,CAACC,IAAI,CAACH,kBAAkB,CAAC;EACxD;EAEAI,YAAY;IACV,OAAO,IAAI,CAACX,SAAS,CAACQ,KAAK,EAAE;EAC/B;EAEAI,WAAW,CAACP,EAAU;IACpB,OAAO,IAAI,CAACL,SAAS,CAACa,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACT,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;EACpE;EAEAU,cAAc,CAACC,gBAA0B,EAAEZ,WAAqB;IAC9D,IAAI,CAACY,gBAAgB,IAAI,CAACZ,WAAW,EAAE;MACrC;;IAGF,MAAMa,GAAG,GAAG,IAAI,CAACjB,SAAS,CAACkB,OAAO,CAACF,gBAAgB,CAAC;IACpD,IAAIC,GAAG,GAAG,CAAC,EAAE;MACX;;IAGFb,WAAW,CAACC,EAAE,GAAGW,gBAAgB,CAACX,EAAE;IACpC,IAAI,CAACL,SAAS,CAACiB,GAAG,CAAC,GAAGb,WAAW;IACjC,IAAI,CAACK,wBAAwB,CAACC,IAAI,CAAC,IAAI,CAACV,SAAS,CAACQ,KAAK,EAAE,CAAC;EAC5D;EAEAW,cAAc,CAACL,QAAkB;IAC/B,IAAI,CAACA,QAAQ,EAAE;MACb;;IAEF,MAAMG,GAAG,GAAG,IAAI,CAACjB,SAAS,CAACkB,OAAO,CAACJ,QAAQ,CAAC;IAC5C,IAAIG,GAAG,GAAG,CAAC,EAAE;MACX;;IAEF,IAAI,CAACjB,SAAS,CAACoB,MAAM,CAACH,GAAG,EAAE,CAAC,CAAC;IAC7B,IAAI,CAACR,wBAAwB,CAACC,IAAI,CAAC,IAAI,CAACV,SAAS,CAACQ,KAAK,EAAE,CAAC;EAC5D;EAEAN,QAAQ;IACN,IAAImB,KAAK,GAAG,CAAC;IACb,KAAK,MAAMP,QAAQ,IAAI,IAAI,CAACd,SAAS,EAAE;MACrC,MAAMsB,SAAS,GAAGC,QAAQ,CAACT,QAAQ,CAACT,EAAE,CAAC;MACvC,IAAIiB,SAAS,GAAGD,KAAK,EAAE;QACrBA,KAAK,GAAGC,SAAS;;;IAGrB,OAAOD,KAAK;EACd;;AAnEWvB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA0B,SAAf1B,eAAe;EAAA2B,YAFd;AAAM","names":["EventEmitter","Subject","MOCKDOCUMENTS","DocumentService","constructor","documents","maxDocumentId","getMaxId","addDocument","newDocument","id","push","documentsListClone","slice","documentListChangedEvent","next","getDocuments","getDocument","find","document","updateDocument","originalDocument","pos","indexOf","deleteDocument","splice","maxId","currentId","parseInt","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/documents/document.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Document } from './document.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentService {\n  documents: Document[] = [];\n  maxDocumentId: number;\n  documentListChangedEvent = new Subject<Document[]>();\n  documentSelectedEvent = new EventEmitter<Document>();\n\n  constructor() {\n    this.documents = MOCKDOCUMENTS;\n    this.maxDocumentId = this.getMaxId();\n  }\n\n  addDocument(newDocument: Document) {\n    if (!newDocument) {\n      return;\n    }\n  \n    this.maxDocumentId++;\n    newDocument.id = `${this.maxDocumentId}`;\n    this.documents.push(newDocument);\n    const documentsListClone = this.documents.slice();\n    this.documentListChangedEvent.next(documentsListClone);\n  }\n\n  getDocuments(): Document[] {\n    return this.documents.slice();\n  }\n\n  getDocument(id: string): Document | null {\n    return this.documents.find(document => document.id === id) || null;\n  }\n\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n  \n    const pos = this.documents.indexOf(originalDocument);\n    if (pos < 0) {\n      return;\n    }\n  \n    newDocument.id = originalDocument.id;\n    this.documents[pos] = newDocument;\n    this.documentListChangedEvent.next(this.documents.slice());\n  }  \n\n  deleteDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.indexOf(document);\n    if (pos < 0) {\n      return;\n    }\n    this.documents.splice(pos, 1);\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (const document of this.documents) {\n      const currentId = parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}