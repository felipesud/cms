{"ast":null,"code":"import { Subject, map } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../contacts/contact.service\";\nexport class MessageService {\n  constructor(http, contactService) {\n    this.http = http;\n    this.contactService = contactService;\n    this.messageChangedEvent = new Subject();\n    this.messages = [];\n  }\n  setMessages(messages) {\n    this.messages = messages;\n    this.messageChangedEvent.next(this.messages.slice());\n  }\n  getMessages() {\n    this.http.get('https://felipe-125b2-default-rtdb.firebaseio.com/messages.json').pipe(map(responseData => {\n      const messages = [];\n      for (const key in responseData) {\n        if (responseData.hasOwnProperty(key)) {\n          messages.push({\n            ...responseData[key],\n            id: key\n          });\n        }\n      }\n      return messages;\n    })).subscribe({\n      next: n => {\n        this.maxMessageId = this.getMaxId();\n        this.messages = n;\n        this.messages.sort((a, b) => +a.id - +b.id);\n        this.messageChangedEvent.next(this.messages.slice());\n      },\n      error: e => console.error(e),\n      complete: () => {\n        this.messages;\n      }\n    });\n    return this.messages;\n  }\n  getMessage(id) {\n    return this.messages.find(m => m.id === id);\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const message of this.messages) {\n      const currentId = Number(message.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addMessage(newMessage) {\n    if (!newMessage) {\n      return;\n    }\n    this.maxMessageId = this.getMaxId();\n    this.maxMessageId++;\n    newMessage.id = this.maxMessageId.toString();\n    this.messages.push(newMessage);\n    this.storeMessages();\n  }\n  storeMessages() {\n    const messages = JSON.stringify(this.messages);\n    const headers = new HttpHeaders().set('Content-Type', 'application/Json');\n    this.http.put('https://felipe-125b2-default-rtdb.firebaseio.com/messages.json', messages, {\n      headers\n    }).subscribe(() => {\n      const cloneMessages = this.messages.slice();\n      this.messageChangedEvent.next(cloneMessages);\n    });\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ContactService));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Subject","map","HttpHeaders","MessageService","constructor","http","contactService","setMessages","messages","messageChangedEvent","next","slice","getMessages","get","pipe","responseData","key","hasOwnProperty","push","id","subscribe","n","maxMessageId","getMaxId","sort","a","b","error","e","console","complete","getMessage","find","m","maxId","message","currentId","Number","addMessage","newMessage","toString","storeMessages","JSON","stringify","headers","set","put","cloneMessages","factory","providedIn"],"sourceRoot":"","sources":["/home/felipe/workspace/cms/src/app/messages/message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, map } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Message } from './message.model';\nimport { ContactService } from '../contacts/contact.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messageChangedEvent = new Subject<Message[]>();\n  messages: Message[] = [];\n  maxMessageId: number;\n\n  constructor(\n    private http: HttpClient,\n    private contactService: ContactService\n  ) {}\n\n  setMessages(messages: Message[]) {\n    this.messages = messages;\n    this.messageChangedEvent.next(this.messages.slice());\n  }\n\n  getMessages(): Message[] {\n    this.http\n      .get<Message[]>(\n        'https://felipe-125b2-default-rtdb.firebaseio.com/messages.json'\n      )\n      .pipe(\n        map((responseData) => {\n          const messages: Message[] = [];\n          for (const key in responseData) {\n            if (responseData.hasOwnProperty(key)) {\n              messages.push({ ...responseData[key], id: key });\n            }\n          }\n          return messages;\n        })\n      )\n      .subscribe({\n        next: (n) => {\n          this.maxMessageId = this.getMaxId();\n          this.messages = n;\n          this.messages.sort((a: Message, b: Message) => +a.id - +b.id);\n          this.messageChangedEvent.next(this.messages.slice());\n        },\n        error: (e) => console.error(e),\n        complete: () => {\n          this.messages;\n        },\n      });\n    return this.messages;\n  }\n\n  getMessage(id: string): Message {\n    return this.messages.find((m) => m.id === id);\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n\n    for (const message of this.messages) {\n      const currentId = Number(message.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  addMessage(newMessage: Message) {\n    if (!newMessage) {\n      return;\n    }\n\n    this.maxMessageId = this.getMaxId();\n    this.maxMessageId++;\n\n    newMessage.id = this.maxMessageId.toString();\n    this.messages.push(newMessage);\n\n    this.storeMessages();\n  }\n\n  storeMessages() {\n    const messages = JSON.stringify(this.messages);\n    const headers = new HttpHeaders().set('Content-Type', 'application/Json');\n    this.http\n      .put(\n        'https://felipe-125b2-default-rtdb.firebaseio.com/messages.json',\n        messages,\n        { headers }\n      )\n      .subscribe(() => {\n        const cloneMessages = this.messages.slice();\n        this.messageChangedEvent.next(cloneMessages);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}